{"version":3,"file":"wagmiConnector.cjs.js","mappings":"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","sources":["webpack://@upbond/wagmi-connector/webpack/bootstrap","webpack://@upbond/wagmi-connector/webpack/runtime/compat get default export","webpack://@upbond/wagmi-connector/webpack/runtime/define property getters","webpack://@upbond/wagmi-connector/webpack/runtime/hasOwnProperty shorthand","webpack://@upbond/wagmi-connector/webpack/runtime/make namespace object","webpack://@upbond/wagmi-connector/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@upbond/wagmi-connector/external commonjs2 \"@upbond/upbond-embed\"","webpack://@upbond/wagmi-connector/external commonjs2 \"@wagmi/core\"","webpack://@upbond/wagmi-connector/external commonjs \"ethers\"","webpack://@upbond/wagmi-connector/external commonjs2 \"viem\"","webpack://@upbond/wagmi-connector/./src/config/index.ts","webpack://@upbond/wagmi-connector/./src/lib/connector.ts","webpack://@upbond/wagmi-connector/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@upbond/upbond-embed\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@wagmi/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ethers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"viem\");","import { IUpbondEmbedParams, UPBOND_BUILD_ENV } from '@upbond/upbond-embed';\n\nexport const initialUpbondConfig = {\n  buildEnv: UPBOND_BUILD_ENV.DEVELOPMENT,\n  network: {\n    host: 'mainnet',\n    chainId: 1,\n    networkName: 'Ethereum Mainnet',\n    blockExplorer: 'https://etherscan.io',\n    ticker: 'ETH',\n    tickerName: 'Ethereum',\n    rpcUrl: 'https://eth.llamarpc.com',\n  },\n  whiteLabel: {\n    walletTheme: {\n      lang: `${window.navigator.language}`,\n      logo: 'https://i.ibb.co/L6vHB5d/company-logo-sample.png',\n      name: 'Company',\n      buttonLogo: 'https://i.ibb.co/wBmybLc/company-button-logo-sample.png',\n      isActive: true,\n      modalColor: '#fffff',\n      bgColor: '#4B68AE',\n      bgColorHover: '#214999',\n      textColor: '#f3f3f3',\n      textColorHover: '#214999',\n      upbondLogin: {\n        globalBgColor: '#ffffff',\n        globalTextColor: '#4B68AE',\n      },\n    },\n  },\n  widgetConfig: {\n    showAfterLoggedIn: true,\n    showBeforeLoggedIn: false,\n  },\n} as IUpbondEmbedParams;\n","import Upbond, {\n  IUpbondEmbedParams,\n  UpbondInpageProvider,\n} from '@upbond/upbond-embed';\nimport { Chain, Connector, ConnectorData, WalletClient } from '@wagmi/core';\nimport { ethers, Signer } from 'ethers';\nimport {\n  Address,\n  createWalletClient,\n  custom,\n  getAddress,\n  UserRejectedRequestError,\n} from 'viem';\n\nimport { initialUpbondConfig } from '../config';\nimport { Options } from '../interfaces';\n\nconst IS_SERVER = typeof window === 'undefined';\n\nfunction normalizeChainId(chainId: string | number | bigint) {\n  if (typeof chainId === 'string')\n    return Number.parseInt(\n      chainId,\n      chainId.trim().substring(0, 2) === '0x' ? 16 : 10\n    );\n  if (typeof chainId === 'bigint') return Number(chainId.toString(10));\n  return chainId;\n}\n\nexport default class UpbondWagmiConnector extends Connector<\n  UpbondInpageProvider,\n  Options\n> {\n  ready = !IS_SERVER;\n\n  readonly id = 'upbond';\n\n  readonly name = 'Upbond Wallet';\n\n  protected provider: UpbondInpageProvider | null = null;\n\n  private upbondInstance!: Upbond;\n\n  isConnected: boolean;\n\n  isConnectorInitialized = true;\n\n  upbondInitialParams = initialUpbondConfig;\n\n  private network = initialUpbondConfig.network;\n\n  constructor(config: {\n    chains?: Chain[];\n    options: Options;\n    upbondInitialParams?: IUpbondEmbedParams;\n  }) {\n    super({\n      options: config.options,\n      chains: config.chains,\n    });\n\n    const chainId = config.options.chainId ? config.options.chainId : 1;\n    const host = config.options.host ? config.options.host : 'mainnet';\n\n    this.upbondInstance = new Upbond({});\n    this.isConnected = false;\n\n    // set network according to chain details provided\n    const chain = this.chains.find((x) => x.id === chainId);\n\n    if (chain) {\n      this.network = {\n        host,\n        chainId,\n        networkName: chain.name,\n        tickerName: chain.nativeCurrency?.name,\n        ticker: chain.nativeCurrency?.symbol,\n        blockExplorer: chain.blockExplorers?.default?.url as string,\n      };\n    } else {\n      console.warn(`ChainId ${chainId} not found in chain list`);\n      this.emit('disconnect');\n    }\n\n    this.isConnectorInitialized = true;\n\n    if (\n      config.upbondInitialParams &&\n      Object.keys(config.upbondInitialParams).length > 0\n    ) {\n      this.upbondInitialParams = {\n        ...this.upbondInitialParams,\n        ...config.upbondInitialParams,\n      };\n    }\n  }\n\n  async initConnector() {\n    this.emit('message', {\n      type: 'connecting',\n    });\n\n    await this.upbondInstance.init(this.upbondInitialParams);\n    const isUpbondLoggedIn =\n      this.upbondInstance.isLoggedIn && this.upbondInstance.isInitialized;\n    if (isUpbondLoggedIn) {\n      this.isConnected = true;\n      this.onConnect();\n\n      const provider = this.upbondInstance.provider as UpbondInpageProvider;\n      if (provider.on) {\n        provider.on('connect', this.onConnect);\n        provider.on('accountsChanged', this.onAccountsChanged);\n        provider.on('chainChanged', (res) =>\n          this.onChainChanged(res as string)\n        );\n        provider.on('disconnect', this.onDisconnect);\n      }\n    }\n  }\n\n  setStorage(storage: {\n    getItem<T>(key: string, defaultState?: T): T;\n    setItem<T>(key: string, value: T): void;\n    removeItem(key: string): void;\n  }) {\n    return true;\n  }\n\n  async getWalletClient({\n    chainId,\n  }: { chainId?: number } = {}): Promise<WalletClient> {\n    const [provider, account] = await Promise.all([\n      this.getProvider(),\n      this.getAccount(),\n    ]);\n    const chain = this.chains.find((x) => x.id === chainId);\n    if (!provider) throw new Error('provider is required.');\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider),\n    });\n  }\n\n  async connect(): Promise<Required<ConnectorData>> {\n    try {\n      this.emit('message', {\n        type: 'connecting',\n      });\n\n      if (!this.upbondInstance.isInitialized) {\n        await this.upbondInstance.init({\n          ...this.upbondInitialParams,\n          network: this.network,\n        });\n      }\n\n      if (!this.upbondInstance.isLoggedIn) await this.upbondInstance.login();\n\n      const provider = this.upbondInstance.provider as UpbondInpageProvider;\n      if (provider.on) {\n        provider.on('connect', () => {\n          // TODO: do anything with on connect emitter\n        });\n        provider.on('accountsChanged', this.onAccountsChanged);\n        provider.on('chainChanged', async (res) => {\n          this.onChainChanged(res as string);\n        });\n        provider.on('disconnect', this.onDisconnect);\n      }\n\n      // Check if there is a user logged in\n      const isAuthenticated = await this.isAuthorized();\n\n      // Check if we have a chainId, in case of error just assign 0 for legacy\n      // if there is a user logged in, return the user\n      if (isAuthenticated) {\n        this.onConnect();\n        const account = await this.getAccount();\n\n        const getChainId = async () => {\n          try {\n            return await this.getChainId();\n          } catch (error) {\n            return 0;\n          }\n        };\n\n        const chainId = await getChainId();\n\n        return {\n          account,\n          chain: {\n            id: chainId as number,\n            unsupported: false,\n          },\n        };\n      }\n      throw new Error('Failed to login, Please try again');\n    } catch (error) {\n      console.error(error, '@connectError');\n      throw new UserRejectedRequestError(new Error('Something went wrong'));\n    }\n  }\n\n  async getAccount(): Promise<Address> {\n    try {\n      const provider = await this.getProvider();\n      const accounts = await provider.request<string[]>({\n        method: 'eth_accounts',\n      });\n      return getAddress(accounts[0]);\n    } catch (error) {\n      console.error('Error: Cannot get account:', error);\n      throw error;\n    }\n  }\n\n  async getProvider() {\n    if (this.provider) {\n      return this.provider;\n    }\n\n    if (!this.upbondInstance.isInitialized) {\n      await this.upbondInstance.init(this.upbondInitialParams);\n    }\n\n    this.provider = this.upbondInstance.provider as UpbondInpageProvider;\n    return this.provider;\n  }\n\n  async getSigner(): Promise<Signer> {\n    try {\n      const provider = new ethers.providers.Web3Provider(\n        await this.getProvider()\n      );\n      const signer = provider.getSigner();\n      return signer;\n    } catch (error) {\n      console.error('Error: Cannot get signer:', error);\n      throw error;\n    }\n  }\n\n  async isAuthorized(): Promise<boolean> {\n    if (!this.upbondInstance.isInitialized) {\n      await this.upbondInstance.init(this.upbondInitialParams);\n    }\n    return this.upbondInstance.isLoggedIn && !!this.upbondInstance.provider;\n  }\n\n  async getChainId(): Promise<number> {\n    try {\n      const provider = await this.getProvider();\n      if (!provider && this.network?.chainId) {\n        return normalizeChainId(this.network.chainId);\n      } else if (provider) {\n        const chainId = await provider.request({ method: 'eth_chainId' });\n        if (chainId) {\n          return normalizeChainId(chainId as string);\n        }\n      }\n\n      throw new Error('Chain ID is not defined');\n    } catch (error) {\n      console.error('Error: Cannot get Chain Id from the network.', error);\n      throw error;\n    }\n  }\n\n  async switchChain(chainId: number) {\n    try {\n      const upbondSupportedNetworks = [\n        { name: 'Ethereum Mainnet', chainId: 1, host: 'mainnet' },\n        { name: 'Goerli', chainId: 5, host: 'goerli' },\n        { name: 'Polygon', chainId: 137, host: 'matic' },\n        { name: 'Mumbai', chainId: 80001, host: 'mumbai' },\n        { name: 'Astar Mainnet', chainId: 80001, host: 'astar_mainnet' },\n      ];\n      const selectedNetwork = upbondSupportedNetworks.find(\n        (network) => network.chainId === chainId\n      );\n      const wagmiSelectedNetwork = this.chains.find(\n        (chain) => chain.id === chainId\n      );\n      if (!wagmiSelectedNetwork) {\n        throw new Error(\n          `Network with chain id ${chainId} is not available, please configure your network first`\n        );\n      }\n      if (!selectedNetwork) {\n        throw new Error(\n          `Hold up! upbond does not support this network -> ${chainId}`\n        );\n      }\n      if (!this.isAuthorized()) throw new Error('Please login first');\n      await this.upbondInstance.setProvider({\n        host: selectedNetwork.host,\n        chainId,\n        networkName: selectedNetwork.name,\n      });\n      return wagmiSelectedNetwork;\n    } catch (error) {\n      console.error('Error: Cannot change chain', error);\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    await this.upbondInstance.logout();\n    await this.upbondInstance.cleanUp();\n    localStorage.clear();\n    window.location.reload();\n  }\n\n  protected isChainUnsupported(chainId: number): boolean {\n    return !this.chains.some((x) => x.id === chainId);\n  }\n\n  protected readonly onAccountsChanged = (...accounts: unknown[]) => {\n    this.emit('change', { account: accounts[0] as `0x${string}` });\n  };\n\n  protected readonly onChainChanged = (chainId: string | number) => {\n    const id = normalizeChainId(chainId);\n    const unsupported = this.isChainUnsupported(id);\n    this.emit('change', { chain: { id, unsupported } });\n  };\n\n  protected readonly onDisconnect = () => {\n    console.log(`onDisconnect`);\n    // this.disconnect();\n  };\n\n  protected readonly onConnect = () => {\n    this.emit('connect', {});\n  };\n}\n","export { default } from './lib/connector';\n"],"names":["UPBOND_BUILD_ENV","initialUpbondConfig","buildEnv","DEVELOPMENT","network","host","chainId","networkName","blockExplorer","ticker","tickerName","rpcUrl","whiteLabel","walletTheme","lang","window","navigator","language","logo","name","buttonLogo","isActive","modalColor","bgColor","bgColorHover","textColor","textColorHover","upbondLogin","globalBgColor","globalTextColor","widgetConfig","showAfterLoggedIn","showBeforeLoggedIn","Upbond","Connector","ethers","createWalletClient","custom","getAddress","UserRejectedRequestError","IS_SERVER","normalizeChainId","Number","parseInt","trim","substring","toString","UpbondWagmiConnector","constructor","config","_this","options","chains","this","_defineProperty","_len","arguments","length","accounts","Array","_key","emit","account","id","unsupported","isChainUnsupported","chain","console","log","upbondInstance","isConnected","find","x","_chain$nativeCurrency","_chain$nativeCurrency2","_chain$blockExplorers","nativeCurrency","symbol","blockExplorers","default","url","warn","isConnectorInitialized","upbondInitialParams","Object","keys","_objectSpread","initConnector","type","init","isUpbondLoggedIn","isLoggedIn","isInitialized","onConnect","provider","on","onAccountsChanged","res","onChainChanged","onDisconnect","setStorage","storage","getWalletClient","undefined","Promise","all","getProvider","getAccount","Error","transport","connect","login","isAuthenticated","isAuthorized","getChainId","error","request","method","getSigner","providers","Web3Provider","signer","_this$network","switchChain","upbondSupportedNetworks","selectedNetwork","wagmiSelectedNetwork","setProvider","disconnect","logout","cleanUp","localStorage","clear","location","reload","some"],"sourceRoot":""}